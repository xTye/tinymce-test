const CLASS_RULER = "document-ruler",
  RULER_PAGEBREAK_CLASS = "mce-ruler-pagebreak",
  RULER_SHORTCUT = "Meta+Q",
  PX_RULER = 3.78,
  PADDING_RULER = 13,
  FORMAT = { width: 210, height: 297 },
  HEIGHT = 3.78 * FORMAT.height,
  STYLE_RULER = `\n html.${CLASS_RULER}{\n   background: #f4f4f4;\n   padding: 0;\n   background-image: url(data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%25%22%20height%3D%22${
    FORMAT.height
  }mm%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cline%20x1%3D%220%22%20y1%3D%22${
    FORMAT.height
  }mm%22%20x2%3D%22100%25%22%20y2%3D%22${
    FORMAT.height
  }mm%22%20stroke%3D%22%23737373%22%20height%3D%221px%22%2F%3E%3C%2Fsvg%3E);\n   background-repeat: repeat-y;\n   background-position: 0 0;\n }\n html.${CLASS_RULER} body{\n   padding: 0 13mm !important;\n   padding-top: 13mm !important;\n   margin: 0 auto !important;\n   background-image: url(data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22${
    FORMAT.width
  }mm%22%20height%3D%22${FORMAT.height}mm%22%3E%3Crect%20width%3D%22${
    FORMAT.width
  }mm%22%20height%3D%22${
    FORMAT.height
  }mm%22%20style%3D%22fill%3A%23fff%22%2F%3E%3Cline%20x1%3D%220%22%20y1%3D%22100%25%22%20x2%3D%22100%25%22%20y2%3D%22100%25%22%20stroke%3D%22%23737373%22%20height%3D%221px%22%2F%3E%3Cline%20x1%3D%2213mm%22%20y1%3D%220%22%20x2%3D%2213mm%22%20y2%3D%22100%25%22%20stroke%3D%22%230168e1%22%20height%3D%221px%22%20stroke-dasharray%3D%225%2C5%22%2F%3E%3Cline%20x1%3D%22${
    FORMAT.width - 13
  }mm%22%20y1%3D%220%22%20x2%3D%22${
    FORMAT.width - 13
  }mm%22%20y2%3D%22100%25%22%20stroke%3D%22%230168e1%22%20height%3D%221px%22%20stroke-dasharray%3D%225%2C5%22%2F%3E%3Cline%20x1%3D%220%22%20y1%3D%2213mm%22%20x2%3D%22100%25%22%20y2%3D%2213mm%22%20stroke%3D%22%230168e1%22%20height%3D%221px%22%20stroke-dasharray%3D%225%2C5%22%2F%3E%3Cline%20x1%3D%220%22%20y1%3D%22${
    FORMAT.height - 13
  }mm%22%20x2%3D%22100%25%22%20y2%3D%22${
    FORMAT.height - 13
  }mm%22%20stroke%3D%22%230168e1%22%20height%3D%221px%22%20stroke-dasharray%3D%225%2C5%22%2F%3E%3C%2Fsvg%3E);\n   background-repeat: repeat-y;\n   background-position: 0 0;\n   width: ${
    FORMAT.width
  }mm;\n   min-height: ${
    FORMAT.height
  }mm !important;\n   box-sizing: border-box;\n   box-shadow: 4px 4px 13px -3px #3c3c3c;\n   -webkit-box-shadow: 4px 4px 13px -3px #3c3c3c;\n }\n html.${CLASS_RULER} .${RULER_PAGEBREAK_CLASS}{\n   margin-top: 13mm;\n   margin-bottom: 13mm;\n   margin-left: -13mm;\n   width: calc(100% + 26mm);\n   border: 0;\n   height: 1px;\n   background: #5a8ecb;\n }\n\n @media print {\n   @page {\n     size: ${
    FORMAT.width
  }mm ${
    FORMAT.height
  }mm;\n     margin: 13mm !important;\n     counter-increment: page\n   }\n   html.${CLASS_RULER}, html.${CLASS_RULER} body {\n     background: transparent;\n     box-shadow: none\n   }\n   html.${CLASS_RULER} body {\n     padding: 0 !important;\n     width: 100%;\n     font-size: 13px;\n     font-family: Helvetica,Arial,sans-serif !important;\n     font-style: normal;\n     letter-spacing: 0\n   }\n   html.${CLASS_RULER} .${RULER_PAGEBREAK_CLASS}{\n     margin: 0 !important;\n     height: 0 !important\n   }\n }\n`
function debounce(t, a = 250, e) {
  let n
  function l() {
    clearTimeout(n),
      !0 === e && void 0 === n && t.apply(this, arguments),
      (n = setTimeout(() => {
        ;(n = void 0), !0 !== e && t.apply(this, arguments)
      }, a))
  }
  return (
    (l.cancel = () => {
      clearTimeout(n)
    }),
    l
  )
}
function createStyle(t, a) {
  const e = a.createElement("style")
  ;(e.innerHTML = t), a.head.appendChild(e)
}
const pluginManager = tinymce.util.Tools.resolve("tinymce.PluginManager")
function pluginRuler(t) {
  if (!0 !== t.settings.ruler) return
  const a = window.tinymce.util.Tools.resolve("tinymce.Env"),
    e = {
      getPageBreakClass: () => RULER_PAGEBREAK_CLASS,
      getPlaceholderHtml() {
        return (
          '<img src="' +
          a.transparentSrc +
          '" class="' +
          this.getPageBreakClass() +
          '" data-mce-resize="false" data-mce-placeholder />'
        )
      },
    },
    n = {
      getSeparatorHtml: () =>
        t.getParam("pagebreak_separator", "\x3c!-- ruler-pagebreak --\x3e"),
      shouldSplitBlock: () => t.getParam("pagebreak_split_block", !1),
    },
    l = n.getSeparatorHtml(t)
  var i = new RegExp(
    l.replace(/[\?\.\*\[\]\(\)\{\}\+\^\$\:]/g, function (t) {
      return "\\" + t
    }),
    "gi",
  )
  t.on("BeforeSetContent", function (t) {
    t.content = t.content.replace(i, e.getPlaceholderHtml())
  }),
    t.on("PreInit", function () {
      t.serializer.addNodeFilter("img", function (a) {
        for (var i, s, r = a.length; r--; )
          if (
            (s = (i = a[r]).attr("class")) &&
            -1 !== s.indexOf(e.getPageBreakClass())
          ) {
            const a = i.parent
            if (t.schema.getBlockElements()[a.name] && n.shouldSplitBlock(t)) {
              ;(a.type = 3), (a.value = l), (a.raw = !0), i.remove()
              continue
            }
            ;(i.type = 3), (i.value = l), (i.raw = !0)
          }
      })
    }),
    t.on("ResolveName", function (a) {
      "IMG" === a.target.nodeName &&
        t.dom.hasClass(a.target, e.getPageBreakClass()) &&
        (a.name = "pagebreak")
    }),
    t.addCommand("mceRulerPageBreak", function () {
      t.settings.pagebreak_split_block
        ? t.insertContent("<p>" + e.getPlaceholderHtml() + "</p>")
        : t.insertContent(e.getPlaceholderHtml())
    }),
    t.addCommand("mceRulerRecalculate", function () {
      const a = t.getDoc().querySelectorAll(`.${RULER_PAGEBREAK_CLASS}`)
      for (let t = 0; t < a.length; t++) {
        const e = a[t],
          n = e.parentElement,
          l = e.offsetTop,
          i = HEIGHT * (t + 1)
        i >= l &&
          (n.style.marginTop =
            ~~(i - (l - n.style.marginTop.replace("px", ""))) + "px")
      }
    }),
    t.addShortcut(RULER_SHORTCUT, "", "mceRulerPageBreak"),
    t.on("init", (a) => {
      const e = t.getDoc()
      createStyle(STYLE_RULER, e)
      const n = e.documentElement
      !1 === n.classList.contains(CLASS_RULER) && n.classList.add(CLASS_RULER)
    })
  const s = debounce(() => {
    t.execCommand("mceRulerRecalculate")
  }, 100)
  t.on("NodeChange", (t) => {
    s()
  })
}
function pluginMath(t) {
  const a = "https://math.now.sh/?from=",
    e = function (t, e = 0, n = 0) {
      const l = e > 0 ? `width="${e}" ` : "",
        i = n > 0 ? `height="${n}" ` : ""
      return `<img src="${(function (t) {
        const e = window
          .encodeURIComponent(t)
          .replace(/[!'()]/g, escape)
          .replace(/\*/g, "%2A")
        return a + e
      })(t)}" data-mce-math="true" ${l}${i}/>`
    },
    n = function (t) {
      return (
        void 0 !== t &&
        "IMG" === t.nodeName &&
        void 0 !== t.dataset &&
        "true" === t.dataset.mceMath
      )
    },
    l = function (t, a, e) {
      let n = "\\begin{" + t + "}\n"
      for (let t = 1; t <= a; t++) {
        for (let t = 1; t <= e; t++) (n += "#?"), t !== e && (n += " & ")
        t !== a && (n += " \\\\"), (n += "\n")
      }
      return n + "\\end{" + t + "}"
    },
    i = t.ui.registry
  t.addCommand(
    "mceMath",
    ((t) => async () => {
      let i
      i =
        void 0 !== t.selection && void 0 !== t.selection.getNode
          ? (function (t) {
              if (!0 === n(t)) {
                const e = t.dataset.mceSrc
                return {
                  value: window.decodeURIComponent(String(e).replace(a, "")),
                  width: +t.getAttribute("width"),
                  height: +t.getAttribute("height"),
                }
              }
              return { value: "", width: 0, height: 0 }
            })(t.selection.getNode())
          : { value: "", width: 0, height: 0 }
      const s = `input_math_${Date.now()}`
      let r
      const o = t.windowManager.open({
        title: "Formula",
        body: {
          type: "panel",
          items: [
            {
              name: "math",
              type: "htmlpanel",
              html: `<div class="mathlive-input" id="${s}"></div>`,
            },
          ],
        },
        initialData: { math: i.value },
        buttons: [
          { type: "cancel", name: "cancel", text: "Cancel" },
          { type: "submit", name: "save", text: "Save", primary: !0 },
        ],
        onSubmit(a) {
          const n = window.document
            .querySelector(`#${s}`)
            .mathfield.$text("latex")
          if (n && "function" == typeof n.trim) {
            const a = e(
              n
                .trim()
                .replace(/\\mleft\./g, "")
                .replace(/\\mright\./g, ""),
              i.width,
              i.height,
            )
            t.focus(), t.insertContent(a)
          } else t.focus()
          a.close()
        },
        onClose(t) {
          void 0 !== r && r.remove()
        },
      })
      o.block("Loading...")
      try {
        setTimeout(() => {
          const t = window.document.querySelector(`#${s}`)
          t.closest(".tox-dialog").classList.add("mathlive"),
            window.MathLive.makeMathField(t, {
              smartFence: !1,
              virtualKeyboardMode: "manual",
              onContentDidChange() {},
              onVirtualKeyboardToggle(t, a, e) {
                r = e
              },
              customVirtualKeyboardLayers: {
                math:
                  "\n        <div class='rows'>\n            <ul>\n                <li class='keycap tex' data-alt-keys='x-var'><i>x</i></li>\n                <li class='keycap tex' data-alt-keys='n-var'><i>n</i></li>\n                <li class='separator w5'></li>\n                <row name='numpad-1'/>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-key='ee' data-alt-keys='ee'>e</li>\n                <li class='keycap tex' data-key='ii' data-alt-keys='ii'>i</li>\n                <li class='keycap tex' data-latex='\\pi' data-alt-keys='numeric-pi'></li>\n            </ul>\n            <ul>\n                <li class='keycap tex' data-key='<' data-alt-keys='<'>&lt;</li>\n                <li class='keycap tex' data-key='>' data-alt-keys='>'>&gt;</li>\n                <li class='separator w5'></li>\n                <row name='numpad-2'/>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-alt-keys='x2' data-insert='#@^{2}'><span><i>x</i>&thinsp;²</span></li>\n                <li class='keycap tex' data-alt-keys='^' data-insert='#@^{#?}'><span><i>x</i><sup>&thinsp;<small>&#x2b1a;</small></sup></span></li>\n                <li class='keycap tex' data-alt-keys='sqrt' data-insert='\\sqrt{#0}' data-latex='\\sqrt{#0}'></li>\n            </ul>\n            <ul>\n                <li class='keycap tex' data-alt-keys='(' >(</li>\n                <li class='keycap tex' data-alt-keys=')' >)</li>\n                <li class='separator w5'></li>\n                <row name='numpad-3'/>\n                <li class='separator w5'></li>\n                <li class='keycap tex small' data-alt-keys='int' data-latex='\\int_0^\\infty'><span></span></li>\n                <li class='keycap tex' data-latex='\\frac{#0}{#?}' data-alt-keys='logic' ></li>\n                <li class='action font-glyph bottom right' data-alt-keys='delete' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'>&#x232b;</li></ul>\n            </ul>\n            <ul>\n                <li class='keycap' data-alt-keys='foreground-color' data-command='[\"applyStyle\",{\"color\":\"#cc2428\"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box'></span></li>\n                <li class='keycap' data-alt-keys='background-color' data-command='[\"applyStyle\",{\"backgroundColor\":\"#fff590\"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box'></span></li>\n                <li class='separator w5'></li>\n                <row name='numpad-4'/>\n                <li class='separator w5'></li>\n                <arrows/>\n            </ul>\n        </div>\n    ",
                functions:
                  "\n        <div class='rows'>\n                  <ul><li class='separator'></li>\n                      <li class='fnbutton small' data-insert='\\sin #?'></li>\n                      <li class='fnbutton small' data-insert='\\sin^{-1} #?'></li>\n                      <li class='fnbutton small' data-insert='\\ln #?'></li>\n                      <li class='fnbutton small' data-insert='\\exponentialE^{#?}'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{lcm}(#?)'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{ceil}(#?)'></li>\n                      <li class='fnbutton small' data-insert='\\lim_{n\\to\\infty} #?'></li>\n                      <li class='fnbutton small' data-insert='\\int_{#?}^{#?}'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{abs}(#?)'></li>\n                  </ul>\n                  <ul><li class='separator'></li>\n                      <li class='fnbutton small' data-insert='\\cos #?'></li>\n                      <li class='fnbutton small' data-insert='\\cos^{-1} #?'></li>\n                      <li class='fnbutton small' data-insert='\\ln_{10} #?'></li>\n                      <li class='fnbutton small' data-insert='10^{#?}'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{gcd}(#?)'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{floor}(#?)'></li>\n                      <li class='fnbutton small' data-insert='\\sum_{n\\mathop=0}^{\\infty}'></li>\n                      <li class='fnbutton small' data-insert='\\int_{0}^{\\infty}'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{sign}(#?)'></li>\n                  </ul>\n                  <ul><li class='separator'></li>\n                      <li class='fnbutton small' data-insert='\\tan #?'></li>\n                      <li class='fnbutton small' data-insert='\\tan^{-1} #?'></li>\n                      <li class='fnbutton small' data-insert='\\log_{#?} #0'></li>\n                      <li class='fnbutton small' data-insert='\\sqrt[#?]{#0}'></li>\n                      <li class='fnbutton small' data-insert='#0 \\mod' data-latex='\\mod'></li>\n                      <li class='fnbutton small' data-insert='\\operatorname{round}(#?)'></li>\n                      <li class='bigfnbutton' data-insert='\\prod_{n\\mathop=0}^{\\infty}' data-latex='{\\tiny \\prod_{n=0}^{\\infty}}'></li>\n                      <li class='bigfnbutton' data-insert='\\frac{\\differentialD #0}{\\differentialD x}'></li>\n                      <li class='action font-glyph bottom right' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'>&#x232b;</li></ul>\n                  <ul><li class='separator'></li>\n                      <li class='fnbutton'>(</li>\n                      <li class='fnbutton'>)</li>\n                      <li class='fnbutton' data-insert='^{#?} ' data-latex='x^{#?} '></li>\n                      <li class='fnbutton' data-insert='_{#?} ' data-latex='x_{#?} '></li>\n                      <li class='keycap w20 ' data-key=' '>&nbsp;</li>\n                      <arrows/>\n                  </ul>\n              </div>",
                matrix: {
                  rows: [
                    [
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 1, 2),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 2, 1),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 1, 3),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 3, 1),
                      },
                    ],
                    [
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 2, 2),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 2, 3),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 3, 2),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("matrix", 3, 3),
                      },
                    ],
                    [
                      { class: "keycap tex small w15", insert: "\\cdots" },
                      { class: "keycap tex small w15", insert: "\\ldots" },
                      { class: "keycap tex small w15", insert: "\\vdots" },
                      { class: "keycap tex small w15", insert: "\\ddots" },
                    ],
                    [
                      {
                        class: "keycap tex small w15",
                        insert: l("pmatrix", 2, 2),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("bmatrix", 2, 2),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("vmatrix", 2, 2),
                      },
                      {
                        class: "keycap tex small w15",
                        insert: l("Vmatrix", 2, 2),
                      },
                    ],
                  ],
                },
              },
              customVirtualKeyboards: {
                qmatrix: {
                  label:
                    '<svg viewBox="0 2 60 35" style="width: 45px; height: 25px"><text x="0" y="15">⎡ ⬚ ⬚ ⎤</text><text x="0" y="30">⎣ ⬚ ⬚ ⎦</text></svg>',
                  tooltip: "Matrix keyboard",
                  layer: "matrix",
                },
              },
              virtualKeyboards: "numeric roman greek functions command qmatrix",
            }),
            t.mathfield.$focus(),
            t.mathfield.$latex(i.value),
            setTimeout(() => o.unblock())
        }, 0)
      } catch (t) {
        o.unblock()
      }
    })(t),
  ),
    i.addToggleButton("math", {
      icon: "superscript",
      tooltip: "Fórmula",
      onAction: () => t.execCommand("mceMath"),
      onSetup: (a) => {
        t.on("NodeChange", (e) =>
          a.setActive(!t.readonly && !0 === n(e.element)),
        )
      },
    }),
    t.on("PastePreProcess", (t) => {
      const a = t.content,
        n = ["\\", "^"]
      let l = !1
      for (let t = 0; t < n.length; t++)
        if (a.indexOf(n[t]) >= 0) {
          l = !0
          break
        }
      if (a && l)
        try {
          t.content = e(t.content)
        } catch (t) {
          console.error(t)
        }
    }),
    i.addMenuItem("math", {
      icon: "superscript",
      text: "Editar fórmula",
      onAction: () => t.execCommand("mceMath"),
    }),
    i.addContextMenu("math", {
      update(t) {
        if (!0 === n(t)) return "math"
      },
    })
}
tinymce.PluginManager.add("ruler", pluginRuler),
  tinymce.PluginManager.add("math", pluginMath)
